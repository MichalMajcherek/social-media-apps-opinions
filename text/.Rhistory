library(datasets)  # Load built-in datasets
head(iris)         # Show the first six lines of iris data
plot(iris)         # Scatterplot matrix for iris data
plot(iris)         # Scatterplot matrix for iris data
# Clear packages
detach("package:datasets", unload = TRUE)  # For base
# Clear plots
dev.off()  # But only if there IS a plot
# Clear mind :)
# Clear mind :)
library(datasets)  # Load built-in datasets
head(iris)         # Show the first six lines of iris data
summary(iris)      # Summary statistics for iris data
plot(iris)         # Scatterplot matrix for iris data
# Clear packages
detach("package:datasets", unload = TRUE)  # For base
# Clear packages
detach("package:datasets", unload = TRUE)  # For base
MyData <-read.csv("/Users/michal/Politechnika/Projekt/cluster/DocumentTermMatrix.csv",
header = TRUE, #are there column names in 1st row?
sep = ",", #USE COMA
strip.white = TRUE, #strip out extra white space in strings.
fill = TRUE, #fill in rows that have unequal numbers of columns
comment.char = "#", #character used for comments that should not be read in
stringsAsFactors = FALSE #Another control for deciding whether characters should be converted to factor
)
dtm1 = as.data.frame.matrix(MyData)
dtm1
dtm1 [1:5, 1:10] #1 - docs 2 - term
asd<-dtm1[, 1] # select [1:5, 1:2] [ 'all' ,1:2]
dtm<-dtm1[,-1]
rownames(dtm)
rownames(dtm)<-asd
filenames <- list.files(getwd(),pattern="*.txt")
filenames <-c(filenames)
filenames
rownames(dtm)
rownames(dtm)<-filenames
filenames
################## EUCLIDIAN ###################### K-MEANS
d1 <- dist(dtm, method="euclidian")
kfit <- kmeans(d1, 3) #?????
kfit
clusplot(as.matrix(d1), kfit$cluster, color=T, shade=T, labels=2, lines=0)
library(tm)
library(SnowballC)
library(ggplot2)
library(wordcloud)
library(cluster)
library(fpc)
################## EUCLIDIAN ###################### K-MEANS
d1 <- dist(dtm, method="euclidian")
kfit <- kmeans(d1, 3) #?????
kfit
clusplot(as.matrix(d1), kfit$cluster, color=T, shade=T, labels=2, lines=0)
library(tm)
library(SnowballC)
library(ggplot2)
library(wordcloud)
library(cluster)
library(fpc)
MyData <-read.csv("/Users/michal/Politechnika/Projekt/cluster/comm.csv",
header = TRUE, #are there column names in 1st row?
sep = ",", #USE COMA
strip.white = TRUE, #strip out extra white space in strings.
fill = TRUE, #fill in rows that have unequal numbers of columns
comment.char = "#", #character used for comments that should not be read in
stringsAsFactors = FALSE #Another control for deciding whether characters should be converted to factor
)
dtm1 = as.data.frame.matrix(MyData)
dtm1
dtm1 [1:1, 1:10] #1 - docs 2 - term
dtm1 [1:5, 1:10] #1 - docs 2 - term
dtm1 [1:1, 1:5] #1 - docs 2 - term
dtm1 [1:1, ] #1 - docs 2 - term
asd<-dtm1[, 1] # select [1:5, 1:2] [ 'all' ,1:2]
rownames(dtm)
rownames(dtm)<-asd
rownames(dtm1)
rownames(dtm1)<-asd
filenames <- list.files(getwd(),pattern="*.txt")
filenames <-c(filenames)
filenames
rownames(dtm1)
rownames(dtm1)<-filenames
rownames(dtm)
rownames(dtm)<-filenames
################## EUCLIDIAN ###################### K-MEANS
d1 <- dist(dtm, method="euclidian")
################## EUCLIDIAN ###################### K-MEANS
d1 <- dist(dtm, method="euclidian")
getwd()
setwd("/Users/michal/Politechnika/Projekt/text/")
getwd()
wd<-"/Users/michal/Politechnika/Projekt/text/"
dir(wd)
docs <- Corpus(DirSource(wd))
docs
writeLines(as.character(docs[[1]]))
docs <- tm_map(docs,removePunctuation)
docs <- tm_map(docs, removeNumbers)
writeLines(as.character(docs[[1]]))
for (j in seq(docs)) {
docs[[j]] <- gsub("/", " ", docs[[j]])
docs[[j]] <- gsub("@", " ", docs[[j]])
docs[[j]] <- gsub("–", " ", docs[[j]])
docs[[j]] <- gsub("’", " ", docs[[j]])
docs[[j]] <- gsub("“", " ", docs[[j]])
docs[[j]] <- gsub("‘", " ", docs[[j]])
docs[[j]] <- gsub(")", " ", docs[[j]])
docs[[j]] <- gsub("”", " ", docs[[j]])
}
writeLines(as.character(docs[[1]]))
docs <- tm_map(docs, tolower)
writeLines(as.character(docs[[1]]))
length(stopwords("english"))
stopwords("english")
docs <- tm_map(docs, removeWords, stopwords("English"))
writeLines(as.character(docs[[1]]))
StW<-read.table("/Users/michal/Politechnika/Projekt/stopwords.txt")
StW
StWW<-as.character(StW$V1)
StWW
docs <- tm_map(docs, removeWords, StWW)
writeLines(as.character(docs[[1]]))
docs <- tm_map(docs, stripWhitespace)
writeLines(as.character(docs[[1]]))
library(SnowballC)
stemDocument("modelling", language = "english")
stemDocument("modeller", language = "english")
stemDocument("models", language = "english")
for (j in seq(docs)) {
docs[[j]]<-stemDocument(docs[[j]], language = "english")
}
writeLines(as.character(docs[[1]]))
dtm <- DocumentTermMatrix(docs)
dtm
dtm <- DocumentTermMatrix(docs)
filenames <- list.files(getwd(),pattern="*.txt")
filenames <-c(filenames)
filenames
rownames(dtm)
rownames(dtm)<-filenames
tdm <- t(dtm)
tdm <- TermDocumentMatrix(docs)
tdm
dtmr <-DocumentTermMatrix(docs, control=list(wordLengths=c(4, 20),bounds = list(global = c(2,Inf))))
filenames <- list.files(getwd(),pattern="*.txt")
filenames <-c(filenames)
rownames(dtmr )<-filenames
dtmr1 = removeSparseTerms(dtmr, 0.70)
filenames <- list.files(getwd(),pattern="*.txt")
filenames <-c(filenames)
rownames(dtmr1 )<-filenames
dtmr
dtmr1
m0 <- as.matrix(dtm)
write.csv(m0, file="/Users/michal/Politechnika/Projekt/cluster/DocumentTermMatrix.csv")
m1 <- as.matrix(dtmr)
write.csv(m1, file="/Users/michal/Politechnika/Projekt/cluster/DocumentTermMatrix_1.csv")
m2 <- as.matrix(dtmr1)
write.csv(m2, file="/Users/michal/Politechnika/Projekt/cluster/SparseDocumentTermMatrix.csv")
MyData <-read.csv("/Users/michal/Politechnika/Projekt/cluster/comm.csv",
header = TRUE, #are there column names in 1st row?
sep = ",", #USE COMA
strip.white = TRUE, #strip out extra white space in strings.
fill = TRUE, #fill in rows that have unequal numbers of columns
comment.char = "#", #character used for comments that should not be read in
stringsAsFactors = FALSE #Another control for deciding whether characters should be converted to factor
)
dtm1 = as.data.frame.matrix(MyData)
dtm1
dtm1 [1:1, ] #1 - docs 2 - term
asd<-dtm1[, 1] # select [1:5, 1:2] [ 'all' ,1:2]
dtm<-dtm1[,-1]
rownames(dtm)
rownames(dtm)<-asd
filenames <- list.files(getwd(),pattern="*.txt")
filenames <-c(filenames)
filenames
rownames(dtm)
rownames(dtm)<-filenames
filenames
################## EUCLIDIAN ###################### K-MEANS
d1 <- dist(dtm, method="euclidian")
kfit <- kmeans(d1, 3) #?????
kfit <- kmeans(d1, 3) #?????
MyData <-read.csv("/Users/michal/Politechnika/Projekt/cluster/comm.csv",
header = TRUE, #are there column names in 1st row?
sep = ",", #USE COMA
strip.white = TRUE, #strip out extra white space in strings.
fill = TRUE, #fill in rows that have unequal numbers of columns
comment.char = "#", #character used for comments that should not be read in
stringsAsFactors = FALSE #Another control for deciding whether characters should be converted to factor
)
dtm1 = as.data.frame.matrix(MyData)
dtm1
dtm1 [1:1, 1:10] #1 - docs 2 - term
MyData <-read.csv("/Users/michal/Politechnika/Projekt/cluster/comm.csv",
header = TRUE, #are there column names in 1st row?
sep = ";", #USE COMA
strip.white = TRUE, #strip out extra white space in strings.
fill = TRUE, #fill in rows that have unequal numbers of columns
comment.char = "#", #character used for comments that should not be read in
stringsAsFactors = FALSE #Another control for deciding whether characters should be converted to factor
)
dtm1 = as.data.frame.matrix(MyData)
dtm1
dtm1 [1:1, 1:10] #1 - docs 2 - term
dtm1 [1:1, ] #1 - docs 2 - term
dtm1 [1:5, ] #1 - docs 2 - term
asd<-dtm1[, 1] # select [1:5, 1:2] [ 'all' ,1:2]
dtm<-dtm1[,-1]
rownames(dtm)
rownames(dtm)<-asd
################## EUCLIDIAN ###################### K-MEANS
d1 <- dist(dtm, method="euclidian")
filenames <- list.files(getwd(),pattern="*.txt")
filenames <-c(filenames)
filenames
rownames(dtm)
rownames(dtm)<-filenames
filenames
################## EUCLIDIAN ###################### K-MEANS
d1 <- dist(dtm, method="euclidian")
kfit <- kmeans(d1, 3) #?????
kfit
clusplot(as.matrix(d1), kfit$cluster, color=T, shade=T, labels=2, lines=0)
View(MyData)
plot(MyData$Stripes - MyData$Seeds, ylab = "YYY", xlab = "XXX", main = "Data")
plot(MyData$Stripes - MyData$Seeds, ylab = "YYY", xlab = "XXX", main = "Data")
plot(MyData$Stripes = MyData$Seeds, ylab = "YYY", xlab = "XXX", main = "Data")
clusplot(as.matrix(d1), kfit$cluster, color=T, shade=T, labels=2, lines=0)
kfit <- kmeans(d1, 5) #?????
MyData <-read.csv("/Users/michal/Politechnika/Projekt/cluster/comm.csv",
header = TRUE, #are there column names in 1st row?
sep = ";", #USE COMA
strip.white = TRUE, #strip out extra white space in strings.
fill = TRUE, #fill in rows that have unequal numbers of columns
comment.char = "#", #character used for comments that should not be read in
stringsAsFactors = FALSE #Another control for deciding whether characters should be converted to factor
)
dtm1 = as.data.frame.matrix(MyData)
dtm1
dtm1 [1:5, ] #1 - docs 2 - term
asd<-dtm1[, 1] # select [1:5, 1:2] [ 'all' ,1:2]
dtm<-dtm1[,-1]
rownames(dtm)
rownames(dtm)<-asd
filenames <- list.files(getwd(),pattern="*.txt")
filenames <-c(filenames)
filenames
rownames(dtm)
rownames(dtm)<-filenames
filenames
################## EUCLIDIAN ###################### K-MEANS
d1 <- dist(dtm, method="euclidian")
kfit <- kmeans(d1, 5) #?????
kfit <- kmeans(d1, 4) #?????
kfit
clusplot(as.matrix(d1), kfit$cluster, color=T, shade=T, labels=2, lines=0)
plot(MyData$Stripes - MyData$Seeds, ylab = "YYY", xlab = "XXX", main = "Data")
clusplot(as.matrix(d1), kfit$cluster, color=T, shade=T, labels=2, lines=0)
kfit <- kmeans(d1, 1) #?????
kfit
clusplot(as.matrix(d1), kfit$cluster, color=T, shade=T, labels=2, lines=0)
kfit <- kmeans(d1, 3) #?????
kfit
clusplot(as.matrix(d1), kfit$cluster, color=T, shade=T, labels=2, lines=0)
MyData <-read.csv("/Users/michal/Politechnika/Projekt/cluster/comm.csv",
header = TRUE, #are there column names in 1st row?
sep = ";", #USE COMA
strip.white = TRUE, #strip out extra white space in strings.
fill = TRUE, #fill in rows that have unequal numbers of columns
comment.char = "#", #character used for comments that should not be read in
stringsAsFactors = FALSE #Another control for deciding whether characters should be converted to factor
)
dtm1 = as.data.frame.matrix(MyData)
dtm1
dtm1 [1:5, ] #1 - docs 2 - term
asd<-dtm1[, 1] # select [1:5, 1:2] [ 'all' ,1:2]
dtm<-dtm1[,-1]
rownames(dtm)
rownames(dtm)<-asd
filenames <- list.files(getwd(),pattern="*.txt")
filenames <-c(filenames)
filenames
rownames(dtm)
rownames(dtm)<-filenames
filenames
################## EUCLIDIAN ###################### K-MEANS
d1 <- dist(dtm, method="euclidian")
kfit <- kmeans(d1, 3) #?????
dtm1 = as.data.frame.matrix(MyData)
dtm1
dtm1 [1:5, ] #1 - docs 2 - term
asd<-dtm1[, 1] # select [1:5, 1:2] [ 'all' ,1:2]
dtm<-dtm1[,-1]
rownames(dtm)
rownames(dtm)<-asd
filenames <- list.files(getwd(),pattern="*.txt")
filenames <-c(filenames)
filenames
rownames(dtm)
rownames(dtm)<-filenames
filenames
################## EUCLIDIAN ###################### K-MEANS
d1 <- dist(dtm, method="euclidian")
kfit <- kmeans(d1, 3) #?????
kfit
clusplot(as.matrix(d1), kfit$cluster, color=T, shade=T, labels=2, lines=0)
dtm1 = as.data.frame.matrix(MyData)
dtm1
dtm1 [1:5, ] #1 - docs 2 - term
asd<-dtm1[, 1] # select [1:5, 1:2] [ 'all' ,1:2]
dtm<-dtm1[,-1]
MyData <-read.csv("/Users/michal/Politechnika/Projekt/cluster/comm.csv",
header = TRUE, #are there column names in 1st row?
sep = ";", #USE COMA
strip.white = TRUE, #strip out extra white space in strings.
fill = TRUE, #fill in rows that have unequal numbers of columns
comment.char = "#", #character used for comments that should not be read in
stringsAsFactors = FALSE #Another control for deciding whether characters should be converted to factor
)
dtm1 = as.data.frame.matrix(MyData)
dtm1
dtm1 [1:5, ] #1 - docs 2 - term
asd<-dtm1[, 1] # select [1:5, 1:2] [ 'all' ,1:2]
dtm<-dtm1[,-1]
rownames(dtm)
rownames(dtm)<-asd
filenames <- list.files(getwd(),pattern="*.txt")
filenames <-c(filenames)
filenames
rownames(dtm)
rownames(dtm)<-filenames
filenames
################## EUCLIDIAN ###################### K-MEANS
d1 <- dist(dtm, method="euclidian")
kfit <- kmeans(d1, 3) #?????
kfit
clusplot(as.matrix(d1), kfit$cluster, color=T, shade=T, labels=2, lines=0)
#plot(MyData$Stripes - MyData$Seeds, ylab = "YYY", xlab = "XXX", main = "Data")
MyData <-read.csv("/Users/michal/Politechnika/Projekt/cluster/topics.csv",
header = TRUE, #are there column names in 1st row?
sep = ";", #USE COMA
strip.white = TRUE, #strip out extra white space in strings.
fill = TRUE, #fill in rows that have unequal numbers of columns
comment.char = "#", #character used for comments that should not be read in
stringsAsFactors = FALSE #Another control for deciding whether characters should be converted to factor
)
dtm1 = as.data.frame.matrix(MyData)
dtm1
dtm1 [1:5, ] #1 - docs 2 - term
asd<-dtm1[, 1] # select [1:5, 1:2] [ 'all' ,1:2]
asd<-dtm1[, -1] # select [1:5, 1:2] [ 'all' ,1:2]
dtm1
dtm1 [1:5, ] #1 - docs 2 - term
asd<-dtm1[, -1] # select [1:5, 1:2] [ 'all' ,1:2]
asd
asd<-dtm1[, 1] # select [1:5, 1:2] [ 'all' ,1:2]
asd
asd<-dtm1[, -1] # select [1:5, 1:2] [ 'all' ,1:2]
asd
MyData <-read.csv("/Users/michal/Politechnika/Projekt/cluster/comm.csv",
header = TRUE, #are there column names in 1st row?
sep = ";", #USE COMA
strip.white = TRUE, #strip out extra white space in strings.
fill = TRUE, #fill in rows that have unequal numbers of columns
comment.char = "#", #character used for comments that should not be read in
stringsAsFactors = FALSE #Another control for deciding whether characters should be converted to factor
)
dtm1 = as.data.frame.matrix(MyData)
dtm1
dtm1 [1:5, ] #1 - docs 2 - term
asd<-dtm1[, -1] # select [1:5, 1:2] [ 'all' ,1:2]
asd
rownames(dtm)
rownames(dtm)<-asd
filenames <- list.files(getwd(),pattern="*.txt")
asd<-dtm1[, 1] # select [1:5, 1:2] [ 'all' ,1:2]
asd
rownames(dtm)
rownames(dtm)<-asd
filenames <- list.files(getwd(),pattern="*.txt")
MyData <-read.csv("/Users/michal/Politechnika/Projekt/cluster/topics.csv",
header = TRUE, #are there column names in 1st row?
sep = ";", #USE COMA
strip.white = TRUE, #strip out extra white space in strings.
fill = TRUE, #fill in rows that have unequal numbers of columns
comment.char = "#", #character used for comments that should not be read in
stringsAsFactors = FALSE #Another control for deciding whether characters should be converted to factor
)
dtm1 = as.data.frame.matrix(MyData)
dtm1
dtm1 [1:5, ] #1 - docs 2 - term
asd<-dtm1[, 11] # select [1:5, 1:2] [ 'all' ,1:2]
asd<-dtm1[, 1] # select [1:5, 1:2] [ 'all' ,1:2]
asd
asd<-dtm1[1:5, 1] # select [1:5, 1:2] [ 'all' ,1:2]
asd
asd<-dtm1[1:5, 2:4] # select [1:5, 1:2] [ 'all' ,1:2]
asd
asd<-dtm1[1:5, 2:3] # select [1:5, 1:2] [ 'all' ,1:2]
asd
asd<-dtm1[1:5, 2:3] # select [1:5, 1:2] [ 'all' ,1:2]
asd
rownames(dtm)
rownames(dtm)<-asd
asd<-dtm1[1:5, 1:3] # select [1:5, 1:2] [ 'all' ,1:2]
asd
rownames(dtm)
rownames(dtm)<-asd
asd<-dtm1[1:5, 1] # select [1:5, 1:2] [ 'all' ,1:2]
asd
rownames(dtm)
rownames(dtm)<-asd
filenames <- list.files(getwd(),pattern="*.txt")
filenames <-c(filenames)
filenames
rownames(dtm)
rownames(dtm)<-filenames
filenames
################## EUCLIDIAN ###################### K-MEANS
d1 <- dist(dtm, method="euclidian")
kfit <- kmeans(d1, 3) #?????
kfit
clusplot(as.matrix(d1), kfit$cluster, color=T, shade=T, labels=2, lines=0)
MyData <-read.csv("/Users/michal/Politechnika/Projekt/cluster/app.csv",
header = TRUE, #are there column names in 1st row?
sep = ";", #USE COMA
strip.white = TRUE, #strip out extra white space in strings.
fill = TRUE, #fill in rows that have unequal numbers of columns
comment.char = "#", #character used for comments that should not be read in
stringsAsFactors = FALSE #Another control for deciding whether characters should be converted to factor
)
dtm1 = as.data.frame.matrix(MyData)
dtm1
dtm1 [1:5, ] #1 - docs 2 - term
asd<-dtm1[, 1] # select [1:5, 1:2] [ 'all' ,1:2]
#rownames(dtm)
rownames(dtm)<-asd
filenames <- list.files(getwd(),pattern="*.txt")
filenames <-c(filenames)
filenames
rownames(dtm)
rownames(dtm)<-filenames
filenames
################## EUCLIDIAN ###################### K-MEANS
d1 <- dist(dtm, method="euclidian")
kfit <- kmeans(d1, 3) #?????
kfit
clusplot(as.matrix(d1), kfit$cluster, color=T, shade=T, labels=2, lines=0)
dtm1 = as.data.frame.matrix(MyData)
dtm1
dtm1 [1:5, ] #1 - docs 2 - term
asd<-dtm1[, 1] # select [1:5, 1:2] [ 'all' ,1:2]
#rownames(dtm)
rownames(dtm)<-asd
filenames <- list.files(getwd(),pattern="*.txt")
filenames <-c(filenames)
################## EUCLIDIAN ###################### K-MEANS
d1 <- dist(dtm, method="euclidian")
kfit <- kmeans(d1, 3) #?????
kfit
clusplot(as.matrix(d1), kfit$cluster, color=T, shade=T, labels=2, lines=0)
